Poloka PSF module.

1) user interface.

makepsf <dbimage> 
constructs the psf. Depending on the availability of
star catalogs in the CatalogPath, it uses them or finds
stars by itself.
There is a MakePSF routine.

When this is done, you can use the psf:

ReducedImage ri(name);
ImagePSF imagePSF(ri);

double flux = imagePSF.PSFValue(x,y,i,j, Posder, ParamDer);
returns the psf value and optionnaly the derivative w.r.t pos and/or
parameters. 

The integral is close to 1 but is NOT enforced to be 1, because the integration
limits are not known.


2)Finding stars
--------------

To measure a PSF, one should before all find stars.
The definition of a star in a purely imaging point of view
is not as straightforward as one may think: the number of objects
labelled stars strongly depends on the minimum signal to noise.

A brief history of star finding in toads/poloka:

At the beginning was Delphine's algorithm, later improved by Julien
Raux.  It now consists in finding a clump in the flux/fluxmax vs fwhm
plot using Sextractor scores. This is intended to derive an IQ and is
used in makecatalog. It provides the seeing estimate.

SExtractor shape scores were not great at this time (they probably
improved since), and we developped a few more object scores (mainly
driven by the need for aperture photometry, using our weights and
masks ) in the AperSEStar class. This class contains a gaussian pseudo
fit to the object profile, in order to get stable second moments
estimators.  A star clump is clearly visible in the second moment
plane (xx,yy) and it provides a solid first estimate of the average IQ
and PSF core parameters.  This is implemented in the FindStarShapes
routine This is used in mkcat2 and produces another seeing estimate
writen in the header of aperse.list. May be we could settle for this
new algorithm as the primary IQ estimate.

The AperSEStar scores list was driven by the need for measuring and
finding stars for photometric calibration purposes. Once the CCD per
CCD catalogs are made, stars are found and matched across exposures
(of a given night in practise). This is done by findstars.cc in the
gastro module (originally developped to solve the global
astrometry). The algorithm is very similar to FindStarShapes, and a
call to the later would probably do the same job. gastro writes the
selected stars in "stars.list"

Then these per-night star catalogs were calibrated, merged across
nights and bands and eventually became the so-called secondary
catalogs (secondarycatalogs table in the db).

  What are the typical statistics in these catalogs?
- it depends...

- It first depends on the considered field. D4 has more stars than the
other fields.

- Then it strongly depends on the applied cuts. gastro uses aperture
fluxes (in large apertures) and a S/N cut by default to 20. This
leaves about 110 stars in D4 ccd0. If you replace the aperture fluxes
by SExtractor fluxes, then with the same S/N thereshold, you get about
165 objects in the same image. The stamped calibration catalog only
has 47 objects probably because of the poor z' sensitivity (the peak
S/N in r' is more than 200).

The code as it is written does not leave the choice explicitely open.
makepsf uses by default an external catalog (for the CFHTLS deep fields),
provided it finds the catalog (D{1,2,3,4}.list in the CatalogPath 
of dbconfig). If you don't provide such a catalog, then it defaults to 
the internal way: using ReducedImage::MakeStarCat and reading the output.
The result is written in <dbimage>/psf.dat, and reloaded later by the 
ImagePSF constructor.


